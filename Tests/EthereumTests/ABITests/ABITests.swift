//
//  ABITests.swift
//  Web3_Tests
//
//  Created by Josh Pyles on 6/13/18.
//


import XCTest
import BigInt

@testable import Ethereum

class ABITests: XCTestCase {
    
    func testSolidityExamples() {
        let uint = UInt32(69)
        let bool = true
        let signature1 = "0xcdcd77c0"
        
        let encoded1 = try! ABIEncoder.encode([.uint(uint), .bool(bool)])
        let result1 = signature1 + encoded1
        XCTAssertEqual(result1, "0xcdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001", "should match example 1")
        
        let bytes = [ Data("abc".utf8), Data("def".utf8) ]
        let signature2 = "0xfce353f6"
        let encoded2 = try! ABIEncoder.encode([.fixedArray(bytes, elementType: .bytes(length: 3), length: 2)])
        let result2 = signature2 + encoded2
        XCTAssertEqual(result2, "0xfce353f661626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000", "should match example 2")
        
        let data = Data("dave".utf8)
        let array = [BigInt(1), BigInt(2), BigInt(3)]
        let signature3 = "0xa5643bf2"
        let types: [SolidityType] = [.bytes(length: nil), .bool, .array(type: .uint, length: nil)]
        let values: [ABIEncodable] = [data, bool, array]
        let typeValues = zip(types, values).map { SolidityWrappedValue(value: $1, type: $0) }
        let result3 = try! signature3 + ABIEncoder.encode(typeValues)
        let expected = "0xa5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
        XCTAssertEqual(expected, result3, "should match example 3")
    }
    
    func testABIEncoder() {
        let expected1 = "0000000000000000000000000000000000000000000000000000000000000001"
        let number = BigUInt(1)
        
        XCTAssertEqual(try ABIEncoder.encode(.uint(number)), expected1, "should encode wrapped values")
        
        do {
            let array2 = [
                try Address(hex: "0xD11Aa575f9C6f30bEDF392872726b2B157C83131", eip55: false),
                try Address(hex: "0x9F2c4Ea0506EeAb4e4Dc634C1e1F4Be71D0d7531", eip55: false)
            ]
            let expected2 = "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d11aa575f9c6f30bedf392872726b2b157c831310000000000000000000000009f2c4ea0506eeab4e4dc634c1e1f4be71d0d7531"
            XCTAssertEqual(try ABIEncoder.encode(.array(array2)), expected2, "should encode array of non dynamic objects")
        } catch let err {
            XCTFail("can't create addresses, error: \(err)")
        }
        
        let array3 = ["abc", "def", "ghi", "jkl", "mno"]
        let expected3 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        XCTAssertEqual(try ABIEncoder.encode(.array(array3)), expected3, "should encode array of non dynamic objects")
        
        let array4 = [true, false, true, false]
        let expected4 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
        XCTAssertEqual(try ABIEncoder.encode([.array(array4)]), expected4, "should encode array of bool")
        
        let array5 = [BigInt(1), BigInt(-1), BigInt(2), BigInt(-2)]
        let expected5 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
        XCTAssertEqual(try ABIEncoder.encode([.array(array5)]), expected5, "should encode fixed values")
        
        let array6: [[UInt32]] = [[1,2,3], [4,5,6]]
        let expected
        XCTAssertEqual(try ABIEncoder.encode([.array(array6)]), expected6, "should encode nested array")
        
        let array7 = ["abc", "def", "ghi", "jkl", "mno"]
        let expected7 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036162630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000364656600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003676869000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036a6b6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000036d6e6f0000000000000000000000000000000000000000000000000000000000"
        XCTAssertEqual(try ABIEncoder.encode([.fixedArray(array7)]), expected7, "should encode dynamic values")
        
        let array8: [[UInt32]] = [[1,2,3], [4,5,6]]
        let expected8 = "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006"
        XCTAssertEqual(try ABIEncoder.encode([.fixedArray(array8, elementType: .array(type: .uint32, length: nil), length: 2)]), expected8, "should encode nested dynamic array")
        
        let array9: [[UInt32]] = [[1,2,3], [4,5,6]]
        let expected9 = "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006"
        XCTAssertEqual(try ABIEncoder.encode([.fixedArray(array9, elementType: .array(type: .uint64, length: 3), length: 2)]), expected9, "should encode nested fixed array")
        
        let expected10 = "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000b68656c6c6f20776f726c64000000000000000000000000000000000000000000"
        XCTAssertEqual(try ABIEncoder.encode([.tuple(.string("hello world"), .uint(BigUInt(8)))]), expected10, "should encode a tuple")
    }
}

#if !canImport(ObjectiveC)
import XCTest

extension ABIConvertibleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ABIConvertibleTests = [
        ("testAddress", testAddress),
        ("testArray", testArray),
        ("testBool", testBool),
        ("testData", testData),
        ("testSignedIntegers", testSignedIntegers),
        ("testSignedIntegersDecodeHex", testSignedIntegersDecodeHex),
        ("testSignedIntegersEncodeHex", testSignedIntegersEncodeHex),
        ("testSolidityRepresentable", testSolidityRepresentable),
        ("testString", testString),
        ("testUnsignedIntegers", testUnsignedIntegers),
    ]
}

extension ABITests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ABITests = [
        ("testEncodingArrays", testEncodingArrays),
        ("testEncodingAsFixedArray", testEncodingAsFixedArray),
        ("testEncodingSingleValues", testEncodingSingleValues),
        ("testSolidityExamples", testSolidityExamples),
    ]
}

extension AddressTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AddressTests = [
        ("testHashability", testHashability),
        ("testWithEip55Checksum", testWithEip55Checksum),
        ("testWithoutEip55Checksum", testWithoutEip55Checksum),
    ]
}

extension DataEthereumTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DataEthereumTests = [
        ("testDataFromTrimmedHex", testDataFromTrimmedHex),
        ("testDataToTrimmedHex", testDataToTrimmedHex),
        ("testDataTrimZeroes", testDataTrimZeroes),
    ]
}

extension EthDataTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EthDataTests = [
        ("testInitialization", testInitialization),
        ("testValueConvertibility", testValueConvertibility),
    ]
}

extension QuantityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QuantityTests = [
        ("testConversions", testConversions),
        ("testHashability", testHashability),
        ("testInitialization", testInitialization),
    ]
}

extension RLPDecoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RLPDecoderTests = [
        ("testListItems", testListItems),
        ("testStringsAndBytes", testStringsAndBytes),
    ]
}

extension RLPEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RLPEncoderTests = [
        ("testListItems", testListItems),
        ("testStringsAndBytes", testStringsAndBytes),
    ]
}

extension RLPItemTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RLPItemTests = [
        ("testReadingAndWriting", testReadingAndWriting),
    ]
}

extension SolidityTypeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SolidityTypeTests = [
        ("testDecodingAddressType", testDecodingAddressType),
        ("testDecodingArrayType", testDecodingArrayType),
        ("testDecodingBoolType", testDecodingBoolType),
        ("testDecodingBytesType", testDecodingBytesType),
        ("testDecodingNumberTypes", testDecodingNumberTypes),
        ("testDecodingStringType", testDecodingStringType),
    ]
}

extension SolidityWrappedValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SolidityWrappedValueTests = [
        ("testAddress", testAddress),
        ("testArray", testArray),
        ("testBool", testBool),
        ("testBytes", testBytes),
        ("testInt", testInt),
        ("testNestedArray", testNestedArray),
        ("testString", testString),
        ("testUInt", testUInt),
    ]
}

extension TransactionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransactionTests = [
        ("testRlpEncoding", testRlpEncoding),
    ]
}

extension UIntBytesRepresentableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UIntBytesRepresentableTests = [
        ("testSpecialCases", testSpecialCases),
        ("testTwoBytes", testTwoBytes),
    ]
}

extension ValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ValueTests = [
        ("testArrayValues", testArrayValues),
        ("testBoolValues", testBoolValues),
        ("testIntValues", testIntValues),
        ("testNilValues", testNilValues),
        ("testTypesValueConvertibility", testTypesValueConvertibility),
        ("testValueConvertibility", testValueConvertibility),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ABIConvertibleTests.__allTests__ABIConvertibleTests),
        testCase(ABITests.__allTests__ABITests),
        testCase(AddressTests.__allTests__AddressTests),
        testCase(DataEthereumTests.__allTests__DataEthereumTests),
        testCase(EthDataTests.__allTests__EthDataTests),
        testCase(QuantityTests.__allTests__QuantityTests),
        testCase(RLPDecoderTests.__allTests__RLPDecoderTests),
        testCase(RLPEncoderTests.__allTests__RLPEncoderTests),
        testCase(RLPItemTests.__allTests__RLPItemTests),
        testCase(SolidityTypeTests.__allTests__SolidityTypeTests),
        testCase(SolidityWrappedValueTests.__allTests__SolidityWrappedValueTests),
        testCase(TransactionTests.__allTests__TransactionTests),
        testCase(UIntBytesRepresentableTests.__allTests__UIntBytesRepresentableTests),
        testCase(ValueTests.__allTests__ValueTests),
    ]
}
#endif
